{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\amand\\\\OneDrive\\\\Desktop\\\\Social\\\\create-social-network\\\\hellobaby\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\amand\\\\OneDrive\\\\Desktop\\\\Social\\\\create-social-network\\\\hellobaby\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\amand\\\\OneDrive\\\\Desktop\\\\Social\\\\create-social-network\\\\hellobaby\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"C:\\\\Users\\\\amand\\\\OneDrive\\\\Desktop\\\\Social\\\\create-social-network\\\\hellobaby\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Users\\\\amand\\\\OneDrive\\\\Desktop\\\\Social\\\\create-social-network\\\\hellobaby\\\\frontend\\\\src\\\\pages\\\\Messages\\\\MessagesChat.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  width: 100%;\\n  height: 100%;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { useQuery, useApolloClient } from '@apollo/react-hooks';\nimport { LoadingDots } from 'components/Loading';\nimport MessagesChatConversation from './MessagesChatConversation';\nimport MessagesChatHeading from './MessagesChatHeading';\nimport { GET_MESSAGES, GET_MESSAGES_SUBSCRIPTION, UPDATE_MESSAGE_SEEN } from 'graphql/messages';\nimport { GET_USER, GET_CONVERSATIONS, GET_AUTH_USER } from 'graphql/user';\nimport * as Routes from 'routes';\nvar Root = styled.div(_templateObject());\n/**\r\n * Messages chat wrapper\r\n */\n\nvar MessagesChat = function MessagesChat(_ref) {\n  var match = _ref.match,\n      authUser = _ref.authUser;\n  var userId = match.params.userId;\n  var client = useApolloClient();\n\n  var _useQuery = useQuery(GET_USER, {\n    variables: {\n      id: userId\n    },\n    skip: userId === Routes.NEW_ID_VALUE\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading;\n\n  var _useQuery2 = useQuery(GET_MESSAGES, {\n    variables: {\n      authUserId: authUser.id,\n      userId: userId\n    },\n    skip: userId === Routes.NEW_ID_VALUE,\n    fetchPolicy: 'network-only'\n  }),\n      subscribeToMore = _useQuery2.subscribeToMore,\n      messages = _useQuery2.data,\n      messagesLoading = _useQuery2.loading;\n\n  var updateMessageSeen = useCallback(\n  /*#__PURE__*/\n  _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return client.mutate({\n              mutation: UPDATE_MESSAGE_SEEN,\n              variables: {\n                input: {\n                  receiver: authUser.id,\n                  sender: userId\n                }\n              },\n              refetchQueries: function refetchQueries() {\n                return [{\n                  query: GET_CONVERSATIONS,\n                  variables: {\n                    authUserId: authUser.id\n                  }\n                }, {\n                  query: GET_AUTH_USER\n                }];\n              }\n            });\n\n          case 3:\n            _context.next = 7;\n            break;\n\n          case 5:\n            _context.prev = 5;\n            _context.t0 = _context[\"catch\"](0);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 5]]);\n  })), [authUser.id, client, userId]);\n  useEffect(function () {\n    var unsubscribe = subscribeToMore({\n      document: GET_MESSAGES_SUBSCRIPTION,\n      variables: {\n        authUserId: authUser.id,\n        userId: userId\n      },\n      updateQuery: function updateQuery(prev, _ref3) {\n        var subscriptionData = _ref3.subscriptionData;\n        if (!subscriptionData.data) return prev;\n        updateMessageSeen();\n        var newMessage = subscriptionData.data.messageCreated;\n        var mergedMessages = [].concat(_toConsumableArray(prev.getMessages), [newMessage]);\n        return {\n          getMessages: mergedMessages\n        };\n      }\n    });\n    return function () {\n      unsubscribe();\n    };\n  }, [authUser.id, userId, subscribeToMore, updateMessageSeen]);\n  useEffect(function () {\n    if (userId !== Routes.NEW_ID_VALUE) {\n      updateMessageSeen();\n    }\n  }, [userId, updateMessageSeen]);\n\n  if (loading || messagesLoading) {\n    return React.createElement(Root, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(LoadingDots, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }));\n  }\n\n  var chatUser = null;\n\n  if (data && data.getUser) {\n    chatUser = data.getUser;\n  }\n\n  return React.createElement(Root, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(MessagesChatHeading, {\n    match: match,\n    chatUser: chatUser,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }), React.createElement(MessagesChatConversation, {\n    authUser: authUser,\n    messages: messages ? messages.getMessages : [],\n    chatUser: chatUser,\n    data: messages,\n    match: match,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }));\n};\n\nMessagesChat.propTypes = {\n  match: PropTypes.object.isRequired,\n  authUser: PropTypes.object.isRequired\n};\nexport default MessagesChat;","map":{"version":3,"sources":["C:/Users/amand/OneDrive/Desktop/Social/create-social-network/hellobaby/frontend/src/pages/Messages/MessagesChat.js"],"names":["React","useEffect","useCallback","PropTypes","styled","useQuery","useApolloClient","LoadingDots","MessagesChatConversation","MessagesChatHeading","GET_MESSAGES","GET_MESSAGES_SUBSCRIPTION","UPDATE_MESSAGE_SEEN","GET_USER","GET_CONVERSATIONS","GET_AUTH_USER","Routes","Root","div","MessagesChat","match","authUser","userId","params","client","variables","id","skip","NEW_ID_VALUE","data","loading","authUserId","fetchPolicy","subscribeToMore","messages","messagesLoading","updateMessageSeen","mutate","mutation","input","receiver","sender","refetchQueries","query","unsubscribe","document","updateQuery","prev","subscriptionData","newMessage","messageCreated","mergedMessages","getMessages","chatUser","getUser","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { useQuery, useApolloClient } from '@apollo/react-hooks';\r\n\r\nimport { LoadingDots } from 'components/Loading';\r\nimport MessagesChatConversation from './MessagesChatConversation';\r\nimport MessagesChatHeading from './MessagesChatHeading';\r\n\r\nimport {\r\n  GET_MESSAGES,\r\n  GET_MESSAGES_SUBSCRIPTION,\r\n  UPDATE_MESSAGE_SEEN,\r\n} from 'graphql/messages';\r\nimport { GET_USER, GET_CONVERSATIONS, GET_AUTH_USER } from 'graphql/user';\r\n\r\nimport * as Routes from 'routes';\r\n\r\nconst Root = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\n/**\r\n * Messages chat wrapper\r\n */\r\nconst MessagesChat = ({ match, authUser }) => {\r\n  const { userId } = match.params;\r\n\r\n  const client = useApolloClient();\r\n\r\n  const { data, loading } = useQuery(GET_USER, {\r\n    variables: { id: userId },\r\n    skip: userId === Routes.NEW_ID_VALUE,\r\n  });\r\n\r\n  const {\r\n    subscribeToMore,\r\n    data: messages,\r\n    loading: messagesLoading,\r\n  } = useQuery(GET_MESSAGES, {\r\n    variables: { authUserId: authUser.id, userId },\r\n    skip: userId === Routes.NEW_ID_VALUE,\r\n    fetchPolicy: 'network-only',\r\n  });\r\n\r\n  const updateMessageSeen = useCallback(async () => {\r\n    try {\r\n      await client.mutate({\r\n        mutation: UPDATE_MESSAGE_SEEN,\r\n        variables: {\r\n          input: {\r\n            receiver: authUser.id,\r\n            sender: userId,\r\n          },\r\n        },\r\n        refetchQueries: () => [\r\n          {\r\n            query: GET_CONVERSATIONS,\r\n            variables: { authUserId: authUser.id },\r\n          },\r\n          { query: GET_AUTH_USER },\r\n        ],\r\n      });\r\n    } catch (err) {}\r\n  }, [authUser.id, client, userId]);\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = subscribeToMore({\r\n      document: GET_MESSAGES_SUBSCRIPTION,\r\n      variables: { authUserId: authUser.id, userId },\r\n      updateQuery: (prev, { subscriptionData }) => {\r\n        if (!subscriptionData.data) return prev;\r\n\r\n        updateMessageSeen();\r\n\r\n        const newMessage = subscriptionData.data.messageCreated;\r\n        const mergedMessages = [...prev.getMessages, newMessage];\r\n\r\n        return { getMessages: mergedMessages };\r\n      },\r\n    });\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [authUser.id, userId, subscribeToMore, updateMessageSeen]);\r\n\r\n  useEffect(() => {\r\n    if (userId !== Routes.NEW_ID_VALUE) {\r\n      updateMessageSeen();\r\n    }\r\n  }, [userId, updateMessageSeen]);\r\n\r\n  if (loading || messagesLoading) {\r\n    return (\r\n      <Root>\r\n        <LoadingDots />\r\n      </Root>\r\n    );\r\n  }\r\n\r\n  let chatUser = null;\r\n  if (data && data.getUser) {\r\n    chatUser = data.getUser;\r\n  }\r\n\r\n  return (\r\n    <Root>\r\n      <MessagesChatHeading match={match} chatUser={chatUser} />\r\n\r\n      <MessagesChatConversation\r\n        authUser={authUser}\r\n        messages={messages ? messages.getMessages : []}\r\n        chatUser={chatUser}\r\n        data={messages}\r\n        match={match}\r\n      />\r\n    </Root>\r\n  );\r\n};\r\n\r\nMessagesChat.propTypes = {\r\n  match: PropTypes.object.isRequired,\r\n  authUser: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default MessagesChat;\r\n"]},"metadata":{},"sourceType":"module"}