{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\amand\\\\OneDrive\\\\Desktop\\\\Social\\\\create-social-network\\\\hellobaby\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\amand\\\\OneDrive\\\\Desktop\\\\Social\\\\create-social-network\\\\hellobaby\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\amand\\\\OneDrive\\\\Desktop\\\\Social\\\\create-social-network\\\\hellobaby\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"C:\\\\Users\\\\amand\\\\OneDrive\\\\Desktop\\\\Social\\\\create-social-network\\\\hellobaby\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Users\\\\amand\\\\OneDrive\\\\Desktop\\\\Social\\\\create-social-network\\\\hellobaby\\\\frontend\\\\src\\\\components\\\\CreateComment.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: row;\\n  align-items: flex-start;\\n  justify-content: flex-start;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { Mutation, withApollo } from 'react-apollo';\nimport { GET_AUTH_USER, GET_USER } from 'graphql/user';\nimport { GET_POST, GET_POSTS, GET_FOLLOWED_POSTS } from 'graphql/post';\nimport { CREATE_COMMENT } from 'graphql/comment';\nimport { Textarea, Button } from './Form';\nimport { NotificationType } from 'constants/NotificationType';\nimport { useNotifications } from 'hooks/useNotifications';\nimport { useStore } from 'store';\nvar Form = styled.form(_templateObject());\n/**\r\n * Creates a comment for a post\r\n */\n\nvar CreateComment = function CreateComment(_ref) {\n  var post = _ref.post,\n      focus = _ref.focus;\n\n  var _useStore = useStore(),\n      _useStore2 = _slicedToArray(_useStore, 1),\n      auth = _useStore2[0].auth;\n\n  var notification = useNotifications();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      comment = _useState2[0],\n      setComment = _useState2[1];\n\n  var buttonEl = useRef(null);\n  var TextareaEl = useRef(false);\n  useEffect(function () {\n    focus && TextareaEl.current.focus();\n  }, [focus]);\n\n  var handleSubmit =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(e, createComment) {\n      var _ref3, data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              _context.next = 3;\n              return createComment();\n\n            case 3:\n              _ref3 = _context.sent;\n              data = _ref3.data;\n              setComment(''); // Create notification on comment\n\n              if (auth.user.id !== post.author.id) {\n                notification.create({\n                  user: post.author,\n                  postId: post.id,\n                  notificationType: NotificationType.COMMENT,\n                  notificationTypeId: data.createComment.id\n                });\n              }\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var onEnterPress = function onEnterPress(e) {\n    if (e.keyCode === 13) {\n      e.preventDefault();\n      buttonEl.current.click();\n    }\n  };\n\n  return React.createElement(Mutation, {\n    mutation: CREATE_COMMENT,\n    variables: {\n      input: {\n        comment: comment,\n        author: auth.user.id,\n        postId: post.id\n      }\n    },\n    refetchQueries: function refetchQueries() {\n      return [{\n        query: GET_FOLLOWED_POSTS,\n        variables: {\n          userId: auth.user.id\n        }\n      }, {\n        query: GET_USER,\n        variables: {\n          username: auth.user.username\n        }\n      }, {\n        query: GET_AUTH_USER\n      }, {\n        query: GET_POSTS,\n        variables: {\n          authUserId: auth.user.id\n        }\n      }, {\n        query: GET_POST,\n        variables: {\n          id: post.id\n        }\n      }];\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, function (createComment, _ref4) {\n    var loading = _ref4.loading;\n    return React.createElement(Form, {\n      onSubmit: function onSubmit(e) {\n        return handleSubmit(e, createComment);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Textarea, {\n      onChange: function onChange(e) {\n        return setComment(e.target.value);\n      },\n      value: comment,\n      placeholder: \"Comente...\",\n      onKeyDown: onEnterPress,\n      ref: TextareaEl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"submit\",\n      color: comment ? 'primary.main' : 'grey[500]',\n      weight: \"bold\",\n      text: true,\n      ref: buttonEl,\n      disabled: !comment || loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Post\"));\n  });\n};\n\nCreateComment.propTypes = {\n  post: PropTypes.object.isRequired,\n  focus: PropTypes.bool,\n  client: PropTypes.object.isRequired\n};\nexport default withApollo(CreateComment);","map":{"version":3,"sources":["C:/Users/amand/OneDrive/Desktop/Social/create-social-network/hellobaby/frontend/src/components/CreateComment.js"],"names":["React","useState","useRef","useEffect","PropTypes","styled","Mutation","withApollo","GET_AUTH_USER","GET_USER","GET_POST","GET_POSTS","GET_FOLLOWED_POSTS","CREATE_COMMENT","Textarea","Button","NotificationType","useNotifications","useStore","Form","form","CreateComment","post","focus","auth","notification","comment","setComment","buttonEl","TextareaEl","current","handleSubmit","e","createComment","preventDefault","data","user","id","author","create","postId","notificationType","COMMENT","notificationTypeId","onEnterPress","keyCode","click","input","query","variables","userId","username","authUserId","loading","target","value","propTypes","object","isRequired","bool","client"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { Mutation, withApollo } from 'react-apollo';\r\n\r\nimport { GET_AUTH_USER, GET_USER } from 'graphql/user';\r\nimport { GET_POST, GET_POSTS, GET_FOLLOWED_POSTS } from 'graphql/post';\r\nimport { CREATE_COMMENT } from 'graphql/comment';\r\n\r\nimport { Textarea, Button } from './Form';\r\n\r\nimport { NotificationType } from 'constants/NotificationType';\r\n\r\nimport { useNotifications } from 'hooks/useNotifications';\r\n\r\nimport { useStore } from 'store';\r\n\r\nconst Form = styled.form`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: flex-start;\r\n  justify-content: flex-start;\r\n`;\r\n\r\n/**\r\n * Creates a comment for a post\r\n */\r\nconst CreateComment = ({ post, focus }) => {\r\n  const [{ auth }] = useStore();\r\n  const notification = useNotifications();\r\n  const [comment, setComment] = useState('');\r\n  const buttonEl = useRef(null);\r\n  const TextareaEl = useRef(false);\r\n\r\n  useEffect(\r\n    () => {\r\n      focus && TextareaEl.current.focus();\r\n    },\r\n    [focus]\r\n  );\r\n\r\n  const handleSubmit = async (e, createComment) => {\r\n    e.preventDefault();\r\n    const { data } = await createComment();\r\n    setComment('');\r\n\r\n    // Create notification on comment\r\n    if (auth.user.id !== post.author.id) {\r\n      notification.create({\r\n        user: post.author,\r\n        postId: post.id,\r\n        notificationType: NotificationType.COMMENT,\r\n        notificationTypeId: data.createComment.id,\r\n      });\r\n    }\r\n  };\r\n\r\n  const onEnterPress = e => {\r\n    if (e.keyCode === 13) {\r\n      e.preventDefault();\r\n      buttonEl.current.click();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Mutation\r\n      mutation={CREATE_COMMENT}\r\n      variables={{ input: { comment, author: auth.user.id, postId: post.id } }}\r\n      refetchQueries={() => [\r\n        { query: GET_FOLLOWED_POSTS, variables: { userId: auth.user.id } },\r\n        { query: GET_USER, variables: { username: auth.user.username } },\r\n        { query: GET_AUTH_USER },\r\n        { query: GET_POSTS, variables: { authUserId: auth.user.id } },\r\n        { query: GET_POST, variables: { id: post.id } },\r\n      ]}\r\n    >\r\n      {(createComment, { loading }) => (\r\n        <Form onSubmit={e => handleSubmit(e, createComment)}>\r\n          <Textarea\r\n            onChange={e => setComment(e.target.value)}\r\n            value={comment}\r\n            placeholder=\"Comente...\"\r\n            onKeyDown={onEnterPress}\r\n            ref={TextareaEl}\r\n          />\r\n\r\n          <Button\r\n            type=\"submit\"\r\n            color={comment ? 'primary.main' : 'grey[500]'}\r\n            weight=\"bold\"\r\n            text\r\n            ref={buttonEl}\r\n            disabled={!comment || loading}\r\n          >\r\n            Post\r\n          </Button>\r\n        </Form>\r\n      )}\r\n    </Mutation>\r\n  );\r\n};\r\n\r\nCreateComment.propTypes = {\r\n  post: PropTypes.object.isRequired,\r\n  focus: PropTypes.bool,\r\n  client: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withApollo(CreateComment);\r\n"]},"metadata":{},"sourceType":"module"}